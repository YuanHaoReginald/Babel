# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-01-02 17:28
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=100, null=True, unique=True)),
                ('avatar', models.ImageField(max_length=256, null=True, upload_to='')),
                ('utype', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1000)),
                ('status', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                ('scores', models.FloatField(null=True)),
                ('price', models.IntegerField(null=True)),
                ('submission', models.FileField(max_length=256, null=True, upload_to='')),
                ('experience', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employerStatement', models.TextField(max_length=1000, null=True)),
                ('translatorStatement', models.TextField(max_length=1000, null=True)),
                ('status', models.IntegerField(default=0)),
                ('adminStatement', models.TextField(max_length=1000, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Assignment')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languageType', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('licenseType', models.IntegerField()),
                ('licenseImage', models.ImageField(max_length=256, upload_to='')),
                ('description', models.CharField(max_length=100, null=True)),
                ('adminVerify', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=128, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=512, null=True)),
                ('status', models.IntegerField(default=0)),
                ('fileUrl', models.FileField(max_length=256, null=True, upload_to='')),
                ('fileType', models.IntegerField()),
                ('publishTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('ddlTime', models.DateTimeField()),
                ('languageOrigin', models.IntegerField(default=0)),
                ('languageTarget', models.IntegerField()),
                ('requirementLicense', models.IntegerField(null=True)),
                ('requirementCreditLevel', models.FloatField(null=True)),
                ('testText', models.TextField(max_length=1000, null=True)),
                ('testResult', models.TextField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            bases=('backend.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creditLevel', models.FloatField(default=3)),
                ('experience', models.IntegerField(default=0)),
                ('telephone', models.CharField(max_length=20, null=True, unique=True)),
                ('alipayNumber', models.CharField(max_length=30, null=True)),
                ('wechatNumber', models.CharField(max_length=30, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('backend.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Translator',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('creditLevel', models.FloatField(default=3)),
                ('experience', models.IntegerField(default=0)),
                ('telephone', models.CharField(max_length=20, null=True, unique=True)),
                ('alipayNumber', models.CharField(max_length=30, null=True)),
                ('wechatNumber', models.CharField(max_length=30, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('backend.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='tag',
            name='task',
            field=models.ManyToManyField(to='backend.Task'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Task'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='task',
            name='employer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Employer'),
        ),
        migrations.AddField(
            model_name='license',
            name='belonger',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Translator'),
        ),
        migrations.AddField(
            model_name='language',
            name='TranslatorId',
            field=models.ManyToManyField(to='backend.Translator'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='translator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Translator'),
        ),
    ]
